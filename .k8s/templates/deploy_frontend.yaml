apiVersion: v1
kind: ConfigMap
metadata:
  name: "${FRONTEND_REPOSITORY_NAME}-config"
  labels:
    app: "${FRONTEND_REPOSITORY_NAME}"
data:
  BUILD_VERSION_NUMBER: "${CIRCLE_PREVIOUS_BUILD_NUM}"

---
apiVersion: v1
kind: Service
metadata:
  name: "${FRONTEND_REPOSITORY_NAME}-svc"
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    name: "${FRONTEND_REPOSITORY_NAME}"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "${FRONTEND_REPOSITORY_NAME}"
  labels:
    app: "${FRONTEND_REPOSITORY_NAME}"
spec:
  selector:
    matchLabels:
      name: "${FRONTEND_REPOSITORY_NAME}"
  replicas: ${PODS_REPLICAS}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  minReadySeconds: 30
  template:
    metadata:
      labels:
        name: "${FRONTEND_REPOSITORY_NAME}"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "3000"
    spec:
      containers:
        - name: "${FRONTEND_REPOSITORY_NAME}"
          image: ${AWS_ECR_ACCOUNT_URL}/${FRONTEND_REPOSITORY_NAME}:${CIRCLE_BRANCH}-${CIRCLE_PREVIOUS_BUILD_NUM}
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: "${FRONTEND_REPOSITORY_NAME}-config"
          resources:
            requests:
              memory: "8192Mi"
              cpu: "1024m"
            # limits:
            #   memory: "8192Mi"
            #   cpu: "1024m"
      # priorityClassName: high-priority
